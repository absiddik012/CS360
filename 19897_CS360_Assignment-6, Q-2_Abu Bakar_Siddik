Q2. Using an abstract class with only pure virtual functions, you can specify similar
behaviors for possibly disparate classes. Governments and companies worldwide are
becoming increasingly concerned with carbon footprints (annual releases of carbon
dioxide into the atmosphere) from buildings burning various types of fuels for heat,
vehicles burning fuels for power, and the like. Many scientists blame these greenhouse
gases for the phenomenon called global warming. Create three small classes unrelated
by inheritance -- classes Building, Car and Bicycle. Give each class some unique
appropriate attributes and behaviors that it does not have in common with other classes.
Write an abstract class CarbonFootprint with only a pure virtual getCarbonFootprint
method. Have each of your classes inherit from that abstract class and implement the
getCarbonFootprint method to calculate an appropriate carbon footprint for that class
(check out a few websites that explain how to calculate carbon footprints, such as
https://www.youtube.com/watch?v=wWeI0c1m14Y). Write an application that creates
objects of each of the three classes, places pointers to those objects in a vector of
CarbonFootprint pointers, then iterates through the vector, polymorphically invoking
each object’s getCarbonFootprint method. For each object, print some identifying
information and the object’s carbon footprint.





Ans:



#include <iostream>
#include <vector>
#include <memory>

using namespace std;

class CarbonFootprint {
public:
    virtual ~CarbonFootprint() = default;
    virtual double getCarbonFootprint() const = 0;
    virtual void print() const = 0;  // Make print a pure virtual function
};
class Building : public CarbonFootprint {
private:
    double electricityUse; // in kWh
public:
    Building(double electricity) : electricityUse(electricity) {}
    double getCarbonFootprint() const override {
        return electricityUse * 0.92; // Example: 0.92 kg CO2 per kWh
    }
    void print() const {
        cout << "Building with " << electricityUse << " kWh annual electricity usage";
    }
};
class Car : public CarbonFootprint {
private:
    double fuelUse; // in liters
public:
    Car(double fuel) : fuelUse(fuel) {}
    double getCarbonFootprint() const override {
        return fuelUse * 2.3; // Example: 2.3 kg CO2 per liter of gasoline
    }
    void print() const {
        cout << "Car with " << fuelUse << " liters of fuel used annually";
    }
};
class Bicycle : public CarbonFootprint {
private:
    double distanceTravelled; // in km per year
public:
    Bicycle(double distance) : distanceTravelled(distance) {}
    double getCarbonFootprint() const override {
        return distanceTravelled * 0.02; // Assumed very low CO2 emission
    }
    void print() const {
        cout << "Bicycle with " << distanceTravelled << " km traveled annually";
    }
};
int main() {
    vector<unique_ptr<CarbonFootprint>> items;

    // Create objects of Building, Car, and Bicycle
    items.push_back(make_unique<Building>(5000)); // 5000 kWh yearly
    items.push_back(make_unique<Car>(1500)); // 1500 liters of gasoline
    items.push_back(make_unique<Bicycle>(200)); // 200 km per year

    // Polymorphically process each element in the vector
    for (const auto& item : items) {
        if (auto b = dynamic_cast<Building*>(item.get()))
            b->print();
        else if (auto c = dynamic_cast<Car*>(item.get()))
            c->print();
        else if (auto b = dynamic_cast<Bicycle*>(item.get()))
            b->print();

        cout << " has a carbon footprint of " << item->getCarbonFootprint() << " kg of CO2 annually.\n";
    }

    return 0;
}
