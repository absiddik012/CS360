Q1. Create a program to shuffle and deal a deck of cards. The program should consist of class Card, class DeckOfCards and a main program. 

Class Card should provide:

a. Data members face and suit of type int.
b. A constructor that receives two ints representing the face and suit and uses them to initialize the data members.
c. Two static arrays of strings representing the faces and suits.
d. A toString function that returns the Card as a string in the form "face of suit." You can use the + operator to concatenate strings.

Class DeckOfCards should contain:

a. An array of Cards named deck to store the Cards.
b. An integer currentCard representing the next card to deal.
c. A default constructor that initializes the Cards in the deck.
d. A shuffle function that shuffles the Cards in the deck. The shuffle algorithm should iterate through the array of Cards. For each Card, randomly select another Card in the deck and swap the two Cards.
e. A dealCard function that returns the next Card object from the deck.
f. A moreCards function that returns a bool value indicating whether there are more Cards to deal.

The main program should create a DeckOfCards object, shuffle the cards, then deal the
52 cards.




Ans:
#include <iostream>
#include <array>
#include <random>
#include <chrono>
#include <algorithm> // Include algorithm for std::shuffle

class Card {
public:
    static const std::array<std::string, 13> faces;
    static const std::array<std::string, 4> suits;

    // Default constructor
    Card() : face(0), suit(0) {}

    // Constructor with parameters
    Card(int face, int suit) : face(face), suit(suit) {}

    std::string toString() const {
        return faces[face] + " of " + suits[suit];
    }

private:
    int face, suit;
};

const std::array<std::string, 13> Card::faces = {"Ace", "2", "3", "4", "5", "6", "7", "8", "9", "10", "Jack", "Queen", "King"};
const std::array<std::string, 4> Card::suits = {"Hearts", "Diamonds", "Clubs", "Spades"};

class DeckOfCards {
public:
    DeckOfCards() {
        int cardCount = 0;
        for (int suit = 0; suit < 4; ++suit) {
            for (int face = 0; face < 13; ++face) {
                deck[cardCount++] = Card(face, suit);
            }
        }

        currentCard = 0;
    }

    void shuffle() {
        unsigned seed = std::chrono::system_clock::now().time_since_epoch().count();
        std::shuffle(deck.begin(), deck.end(), std::default_random_engine(seed));
    }

    Card dealCard() {
        return deck[currentCard++];
    }

    bool moreCards() const {
        return currentCard < deck.size();
    }

private:
    std::array<Card, 52> deck;
    int currentCard;
};

int main(void) {
    DeckOfCards deckOfCards;
    deckOfCards.shuffle();

    while (deckOfCards.moreCards()) {
        std::cout << deckOfCards.dealCard().toString() << std::endl;
    }

    return 0;
}
