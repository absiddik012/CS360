Q2. A supermarket chain has asked you to develop an automatic checkout system. All products are identifiable by means of a barcode and the product name. Groceries are either sold in packages or by weight. Packed goods have fixed prices. The price of groceries sold by weight is calculated by multiplying the weight by the current price per kilo. 
Develop the classes needed to represent the products first and organize them hierarchically. The Product class, which contains generic information on all products (barcode, name, etc.), can be used as a base class.

a. The Product class contains two data members of type long used for storing barcodes and the product name. Define a constructor with parameters for both data members. Add default values for the parameters to provide a default constructor for the class. In addition to the access methods setCode() and getCode(), also define the methods scanner() and printer(). For test purposes, these methods will simply output product data on screen or read the data of a product from the keyboard.

b. The next step involves developing special cases of the Product class. Define two classes derived from Product, PrepackedFood and FreshFood. In addition to the product data, the PrepackedFood class should contain the unit price and the FreshFood class should contain a weight and a price per kilo as data members.
In both classes define a constructor with parameters providing default-values for all data members. Use both the base and member initializer.
Define the access methods needed for the new data members. Also redefine the methods scanner() and printer() to take the new data members into consideration.

c. Test the various classes in a main function that creates two objects each of the types Product, PrepackedFood and FreshFood. One object of each type is fully initialized in the object definition. Use the default constructor to create the other object. Test the get and set methods and the scanner() method and display the products on screen.





Ans:
#include <iostream>
#include <string>

using namespace std;

class Product {
protected:
    long barcode;
    string name;

public:
    Product(long code = 0, string productName = "") : barcode(code), name(productName) {}

    void setCode(long code) {
        barcode = code;
    }

    long getCode() const {
        return barcode;
    }

    virtual void scanner() {
        cout << "Enter barcode: ";
        cin >> barcode;
        cin.ignore(); // Ignore trailing newline to properly use getline next
        cout << "Enter product name: ";
        getline(cin, name);
    }

    virtual void printer() const {
        cout << "Barcode: " << barcode << ", Product Name: " << name << endl;
    }
};

class PrepackedFood : public Product {
protected:
    double unitPrice;

public:
    PrepackedFood(long code = 0, string productName = "", double price = 0.0)
        : Product(code, productName), unitPrice(price) {}

    void setUnitPrice(double price) {
        unitPrice = price;
    }

    double getUnitPrice() const {
        return unitPrice;
    }

    void scanner() override {
        Product::scanner();
        cout << "Enter unit price: ";
        cin >> unitPrice;
    }

    void printer() const override {
        Product::printer();
        cout << "Unit Price: $" << unitPrice << endl;
    }
};

class FreshFood : public Product {
protected:
    double weight;
    double pricePerKilo;

public:
    FreshFood(long code = 0, string productName = "", double wt = 0.0, double price = 0.0)
        : Product(code, productName), weight(wt), pricePerKilo(price) {}

    void setWeight(double wt) {
        weight = wt;
    }

    double getWeight() const {
        return weight;
    }

    void setPricePerKilo(double price) {
        pricePerKilo = price;
    }

    double getPricePerKilo() const {
        return pricePerKilo;
    }

    void scanner() override {
        Product::scanner();
        cout << "Enter weight (kg): ";
        cin >> weight;
        cout << "Enter price per kilo: $";
        cin >> pricePerKilo;
    }

    void printer() const override {
        Product::printer();
        cout << "Weight: " << weight << " kg, Price Per Kilo: $" << pricePerKilo << endl;
    }
};

int main() {
    PrepackedFood prepacked(12345, "Canned Beans", 2.99);
    FreshFood fresh(54321, "Apples", 1.5, 3.49);

    cout << "Prepacked Food:" << endl;
    prepacked.printer();

    cout << "\nFresh Food:" << endl;
    fresh.printer();

    // Demonstrate scanner functionality for an additional PrepackedFood and FreshFood
    PrepackedFood prepackedDefault;
    FreshFood freshDefault;

    cout << "\nEntering new PrepackedFood details:" << endl;
    prepackedDefault.scanner();
    cout << "\nNew PrepackedFood details:" << endl;
    prepackedDefault.printer();

    cout << "\nEntering new FreshFood details:" << endl;
    freshDefault.scanner();
    cout << "\nNew FreshFood details:" << endl;
    freshDefault.printer();

    return 0;
}
